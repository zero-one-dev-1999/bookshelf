{
  "version": 3,
  "sources": ["../../node_modules/json-stringify-safe/stringify.js", "../../node_modules/redux-persist-transform-encrypt/lib/sync.js"],
  "sourcesContent": ["exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n", "import Aes from 'crypto-js/aes.js';\nimport CryptoJsCore from 'crypto-js/core.js';\nimport stringify from 'json-stringify-safe';\nimport { createTransform } from 'redux-persist';\nconst makeError = (message) => new Error(`redux-persist-transform-encrypt: ${message}`);\nexport const encryptTransform = (config, transformConfig) => {\n    if (typeof config === 'undefined') {\n        throw makeError('No configuration provided.');\n    }\n    const { secretKey } = config;\n    if (!secretKey) {\n        throw makeError('No secret key provided.');\n    }\n    const onError = typeof config.onError === 'function' ? config.onError : console.warn;\n    return createTransform((inboundState, _key) => Aes.encrypt(stringify(inboundState), secretKey).toString(), (outboundState, _key) => {\n        if (typeof outboundState !== 'string') {\n            return onError(makeError('Expected outbound state to be a string.'));\n        }\n        try {\n            const decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);\n            if (!decryptedString) {\n                throw new Error('Decrypted string is empty.');\n            }\n            try {\n                return JSON.parse(decryptedString);\n            }\n            catch {\n                return onError(makeError('Failed to parse state as JSON.'));\n            }\n        }\n        catch {\n            return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));\n        }\n    }, transformConfig);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA,cAAU,OAAO,UAAUA;AAC3B,YAAQ,eAAe;AAEvB,aAASA,WAAU,KAAK,UAAU,QAAQ,eAAe;AACvD,aAAO,KAAK,UAAU,KAAK,WAAW,UAAU,aAAa,GAAG,MAAM;AAAA,IACxE;AAEA,aAAS,WAAW,UAAU,eAAe;AAC3C,UAAI,QAAQ,CAAC,GAAG,OAAO,CAAC;AAExB,UAAI,iBAAiB;AAAM,wBAAgB,SAAS,KAAK,OAAO;AAC9D,cAAI,MAAM,CAAC,MAAM;AAAO,mBAAO;AAC/B,iBAAO,iBAAiB,KAAK,MAAM,GAAG,MAAM,QAAQ,KAAK,CAAC,EAAE,KAAK,GAAG,IAAI;AAAA,QAC1E;AAEA,aAAO,SAAS,KAAK,OAAO;AAC1B,YAAI,MAAM,SAAS,GAAG;AACpB,cAAI,UAAU,MAAM,QAAQ,IAAI;AAChC,WAAC,UAAU,MAAM,OAAO,UAAU,CAAC,IAAI,MAAM,KAAK,IAAI;AACtD,WAAC,UAAU,KAAK,OAAO,SAAS,UAAU,GAAG,IAAI,KAAK,KAAK,GAAG;AAC9D,cAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,oBAAQ,cAAc,KAAK,MAAM,KAAK,KAAK;AAAA,QACxE;AACK,gBAAM,KAAK,KAAK;AAErB,eAAO,YAAY,OAAO,QAAQ,SAAS,KAAK,MAAM,KAAK,KAAK;AAAA,MAClE;AAAA,IACF;AAAA;AAAA;;;AC1BA,iBAAgB;AAChB,kBAAyB;AACzB,iCAAsB;AAEtB,IAAM,YAAY,CAAC,YAAY,IAAI,MAAM,oCAAoC,OAAO,EAAE;AAC/E,IAAM,mBAAmB,CAAC,QAAQ,oBAAoB;AACzD,MAAI,OAAO,WAAW,aAAa;AAC/B,UAAM,UAAU,4BAA4B;AAAA,EAChD;AACA,QAAM,EAAE,UAAU,IAAI;AACtB,MAAI,CAAC,WAAW;AACZ,UAAM,UAAU,yBAAyB;AAAA,EAC7C;AACA,QAAM,UAAU,OAAO,OAAO,YAAY,aAAa,OAAO,UAAU,QAAQ;AAChF,SAAO,gBAAgB,CAAC,cAAc,SAAS,WAAAC,QAAI,YAAQ,2BAAAC,SAAU,YAAY,GAAG,SAAS,EAAE,SAAS,GAAG,CAAC,eAAe,SAAS;AAChI,QAAI,OAAO,kBAAkB,UAAU;AACnC,aAAO,QAAQ,UAAU,yCAAyC,CAAC;AAAA,IACvE;AACA,QAAI;AACA,YAAM,kBAAkB,WAAAD,QAAI,QAAQ,eAAe,SAAS,EAAE,SAAS,YAAAE,QAAa,IAAI,IAAI;AAC5F,UAAI,CAAC,iBAAiB;AAClB,cAAM,IAAI,MAAM,4BAA4B;AAAA,MAChD;AACA,UAAI;AACA,eAAO,KAAK,MAAM,eAAe;AAAA,MACrC,QACM;AACF,eAAO,QAAQ,UAAU,gCAAgC,CAAC;AAAA,MAC9D;AAAA,IACJ,QACM;AACF,aAAO,QAAQ,UAAU,mFAAmF,CAAC;AAAA,IACjH;AAAA,EACJ,GAAG,eAAe;AACtB;",
  "names": ["stringify", "Aes", "stringify", "CryptoJsCore"]
}
